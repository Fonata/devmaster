<?php

/**
 * @file devshop_github.module
 */

/**
 * Implements hook_menu().
 */
function devshop_github_menu() {
  $items = array();

  $items['admin/hosting/devshop/github'] = array(
    'title' => 'GitHub',
    'description' => 'DevShop GitHub Integration Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devshop_github_settings_form'),
    'access arguments' => array('administer projects'),
    'file' => 'admin.inc',
    'file path' => drupal_get_path('module', 'devshop_github') . '/includes',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_nodeapi_TYPE_OP().
 */
function devshop_github_nodeapi_project_load(&$node) {

  $query = db_query('SELECT * FROM {hosting_devshop_github_pull_requests} WHERE project_nid = %d', $node->nid);
  while($pull_request = db_fetch_object($query)) {
    $pull_request->pull_request_object = unserialize($pull_request->pull_request_object);
    $node->project->environments[$pull_request->environment_name]->github_pull_request = $pull_request;
  }
}

/**
 * Implements hook_nodeapi_TYPE_OP().
 */
function devshop_github_nodeapi_project_view(&$node, $a3, $a4) {

}


/**
 * Implements hook_hosting_task_update_status()
 */
function devshop_github_hosting_task_update_status($task, $status) {

  $task_types = array(
    'test',
    'import',
    'verify',
    'devshop-deploy',
  );

  if (in_array($task->task_type, $task_types) && $task->ref->type == 'site' && isset($task->ref->environment->github_pull_request)) {

    // If autoloader is not available, return.
    if (!file_exists(__DIR__ . '/vendor/autoload.php')) {
      return;
    }

    // If project is not from github, return.
    if ($task->ref->project->git_provider != 'github') {
      return;
    }

    // Include vendors
    require_once 'vendor/autoload.php';

    drush_log('===========================================', 'ok');
    drush_log('Notifying github...', 'ok');

    // Extract username and repo
    list($s, $owner, $repo) = explode('/', parse_url($task->ref->project->git_repo_url, PHP_URL_PATH));

    try {
      $token = variable_get('devshop_github_token', '');
      $client = new \Github\Client();
      $client->authenticate($token, Github\Client::AUTH_HTTP_TOKEN);

      $comment = $client->api('issue')
        ->comments()
        ->create($owner, $repo, $task->ref->environment->github_pull_request->number, array(
          'body' => devshop_github_comment($task, $status),
        ));
      drush_log('Comment posted! ' . print_r($comment, 1), 'ok');
    } catch (Github\Exception\RuntimeException $e) {
      drush_log('GitHub API Error: ' . $e->getMessage(), 'error');
      drush_log(l(t('Configure GitHub API'), 'admin/hosting/devshop/github'), 'error');
    } catch (Github\Exception\ValidationFailedException $e) {
      drush_log('GitHub API Error: ' . $e->getMessage(), 'error');
    }

    drush_log('done trying... ', 'ok');

  }
}

/**
 *
 */
function devshop_github_comment($task, $status) {

  $output = array();
  $output[] = '> **DEVSHOP**';
  $output[] = '> ' . ucfirst($task->task_type) .  ": " . _hosting_parse_error_code($status);
  $output[] = '> Site: ' . $task->ref->environment->url;
  $output[] = '> Project: ' . url("node/{$task->ref->project->nid}", array('absolute' => TRUE));

  if ($task->task_type == 'test') {
    $output[] = 'Results: ' . url("devshop_tests/{$task->nid}/{$task->vid}", array('absolute' => TRUE));
  }

  if ($task->task_type == 'import') {
    $output[] = t('Your environment is now available.');
  }

  return implode("\n", $output);
}



/**
 * GitHub action to take on webhook init
 */
function devshop_github_webhook($project_node){
  $headers = getallheaders();
  $project = $project_node->project;

  // @TODO: Handle form content from github as well.
  if ($headers['content-type'] == 'application/json'){
    $data = json_decode($GLOBALS['HTTP_RAW_POST_DATA']);

    $args = array();
    $args['cache'] = 1;

    switch ($headers['X-GitHub-Event']){
      case 'ping':
        $message = 'Pong!';
        break;
      case 'push':

        // Limit "Deploy" tasks to only run for the branches we have new code for..
        $git_ref = strtr($data->ref, array('refs/tags/' => '', 'refs/heads/' => ''));

        // Check for environments set to pull
        $environments_to_pull = array();
        foreach ($project->environments as $environment_name => $environment) {

          // Only pull if deploy is not disabled or if environment is tracking a tag.
          if ($git_ref == $environment->git_ref && !$environment->settings->pull_disabled && !in_array($environment->git_ref, $project->settings->git['tags'])) {
            $environments_to_pull[] = $environment->name;

            $args = array();
            $args['git_ref'] = $environment->git_ref;
            $args['update'] = $environment->settings->deploy['update'];
            $args['revert'] = $environment->settings->deploy['revert'];
            $args['cache'] = $environment->settings->deploy['cache'];

            if (isset($environment->site) && $node = node_load($environment->site)) {
              hosting_add_task($environment->site, 'devshop-deploy', $args);
            }
          }
        }

        $message = "Push Received for git ref $git_ref. Deploying code to environments: " . implode(', ', $environments_to_pull);
        break;

      case 'pull_request':
        // If pull request environments is enabled...
        if ($project->settings->github['pull_request_environments']){
          $message = 'Pull Request Received.';

          // @TODO: Handle forks?
          $branch = $data->pull_request->head->ref;

          // Determine environment branch.
          // @TODO: Make Configurable, allow branch names to be env name
          //   $environment_name = "pr" . $data->pull_request->number;
          $environment_name = 'branch_' . str_replace('-', '_', $branch);

          // When PR is opened... create new environment.
          if ($data->action == 'opened'){
            $message = "Detected Pull Request creation for $branch \n";
            if (isset($project->environments[$environment_name])) {
              $message = "Environment $environment_name already exists! Not creating one... \n";

              if (isset($project->environments[$environment_name]->github_pull_request)) {
                $message .= "Already have a PR for $environment_name ... not inserting.";
                break;
              }
            }
            else {
              // If method is "install"...
              if ($project->settings->github['pull_request_environments_method'] == 'install') {
                hosting_create_environment($project, $environment_name, $branch);
              }
              // Otherwise, it is a clone from live.
              else {
                hosting_create_environment($project, $environment_name, $branch, $project->settings->live['live_environment']);
              }
              $message .= "Environment $environment_name created for $project_node->title \n";
            }

            // Insert PR record
            $info = new stdClass();
            $info->id = $data->pull_request->id;
            $info->number = $data->pull_request->number;
            $info->project_nid = $project->nid;
            $info->environment_name = $environment_name;
            $info->pull_request_object = serialize($data->pull_request);

            // Save environment record.
            if (drupal_write_record('hosting_devshop_github_pull_requests', $info)){
              $message .= ' ' . t('Pull Request info saved to DevShop.');
            }
          }

          // When PR is cloded, delete environment.
          elseif ($data->action == 'synchronize') {

            // Update the PR record
            $info = new stdClass();
            $info->id = $data->pull_request->id;
            $info->number = $data->pull_request->number;
            $info->project_nid = $project->nid;
            $info->environment_name = $environment_name;
            $info->pull_request_object = serialize($data->pull_request);

            // Save environment record.
            if (isset($project->environments[$environment_name]->github_pull_request)) {
              $update = array('id');
            }
            else {
              $update = array();
            }

            if (drupal_write_record('hosting_devshop_github_pull_requests', $info, $update)){
              $message .= ' ' . t('Pull Request info saved to DevShop.');
            }
          }
          // When PR is cloded, delete environment.
          elseif ($data->action == 'closed'){
            $message .= "Pull Request Closed \n";
            if ($project->settings->github['pull_request_environments_delete']){

              if (isset($project->environments[$environment_name]->site) && $node = node_load($project->environments[$environment_name]->site)) {
                hosting_add_task($project->environments[$environment_name]->site, 'delete');
              }
              $message .= "Site $environment_name (Node: {$project->environments[$environment_name]->site}) scheduled for deletion.";
            }
          }
        }
        break;
    }

  }
  else {
    $message = 'GitHub Request Received, but not in JSON. Please make sure to configure the webhook to use Payload version: application/vnd.github.v3+json';
  }
  return $message;
}
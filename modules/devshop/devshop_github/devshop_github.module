<?php

/**
 * @file devshop_github.module
 */

require_once 'vendor/autoload.php';

/**
 * Implements hook_menu().
 */
function devshop_github_menu() {
  $items = array();

  $items['admin/hosting/devshop/github'] = array(
    'title' => 'GitHub',
    'description' => 'DevShop GitHub Integration Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devshop_github_settings_form'),
    'access arguments' => array('administer projects'),
    'file' => 'admin.inc',
    'file path' => drupal_get_path('module', 'devshop_github') . '/includes',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_nodeapi_TYPE_OP().
 */
function devshop_github_nodeapi_project_load(&$node) {

  $query = db_query('SELECT * FROM {hosting_devshop_github_pull_requests} WHERE project_nid = %d', $node->nid);
  while($pull_request = db_fetch_object($query)) {
    $pull_request->pull_request_object = unserialize($pull_request->pull_request_object);
    if (isset( $node->project->environments[$pull_request->environment_name])) {
      $node->project->environments[$pull_request->environment_name]->github_pull_request = $pull_request;
    }
  }

  // Parse github owner and repo.
  if ($node->project->git_provider == 'github') {
    $node->project->github_owner =
      $parts = explode('/', parse_url($node->project->git_repo_url, PHP_URL_PATH));
    $node->project->github_owner = $parts[1];
    $node->project->github_repo = $parts[2];
  }
}

/**
 * Implements hook_nodeapi_TYPE_OP() for task insert
 *
 * If task is a test run, send a "pending" commit status.
 */
function devshop_github_nodeapi_task_update($node) {

  // Only act on test triggers.
  if ($node->task_type != 'test' || $node->task_type != 'deploy') {
    return;
  }

  // Load the site and check for environment.
  $site = node_load($node->rid);
  if (empty($site->environment) || empty($site->environment->github_pull_request) || empty($site->environment->settings->deploy['test'])) {
    return;
  }

  try {
    $token = variable_get('devshop_github_token', '');
    $client = new \Github\Client();
    $client->authenticate($token, Github\Client::AUTH_HTTP_TOKEN);

    // Create a deployment status
    $project = $site->project;
    $owner = $project->github_owner;
    $repo = $project->github_repo;
    $sha = $site->environment->github_pull_request->pull_request_object->head->sha;

    $params = new stdClass();
    $params->state = 'pending';

    if ($node->task_type != 'test') {
      $params->target_url = url(
        "devshop_tests/{$node->nid}/{$node->vid}",
        array('absolute' => true)
      );
      $params->description = t('DevShop: Run Tests');
      $params->context = 'devshop/tests';
    }
    elseif ($node->task_type != 'deploy') {
      $params->target_url = $site->environment->url;
      $params->description = t('DevShop: Deploy');
      $params->context = 'devshop/deploy';
    }

    // Post status to github
    $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));

    watchdog('devshop_github','Test run initiated. GitHub has been notified.');
  } catch (Github\Exception\RuntimeException $e) {
    watchdog('devshop_github', 'GitHub Runtime Error in devshop_github_nodeapi_task_update(): ' . $e->getMessage());
  }
}

//
///**
// * Implements hook_hosting_task_update_status()
// */
//function devshop_github_hosting_task_update_status($task, $status) {
//
//  $task_types = array(
//    'test',
//    'import',
//    'devshop-deploy',
//  );
//
//  if (in_array($task->task_type, $task_types) && $task->ref->type == 'site' && isset($task->ref->environment->github_pull_request)) {
//
//    // If autoloader is not available, return.
//    if (!file_exists(__DIR__ . '/vendor/autoload.php')) {
//      return;
//    }
//
//    // If project is not from github, return.
//    if ($task->ref->project->git_provider != 'github') {
//      return;
//    }
//
//    // Include vendors
//    require_once 'vendor/autoload.php';
//
//    drush_log('===========================================', 'ok');
//    drush_log('Notifying github...', 'ok');
//
//    // Extract username and repo
//    list($s, $owner, $repo) = explode('/', parse_url($task->ref->project->git_repo_url, PHP_URL_PATH));
//
//    try {
//      $token = variable_get('devshop_github_token', '');
//      $client = new \Github\Client();
//      $client->authenticate($token, Github\Client::AUTH_HTTP_TOKEN);
//
//      // Create a status
//      $sha = $task->ref->environment->github_pull_request->pull_request_object->head->sha;
//
//      if ($task->task_type == 'devshop-deploy'){
//        $description = t('Deployed to Environment: ') . _hosting_parse_error_code($status);
//        $url = $task->ref->environment->url;
//      }
//      elseif ($task->task_type == 'test') {
//        $description = t('Tests: ') . _hosting_parse_error_code($status);
//        $url = url("devshop_tests/{$task->nid}/{$task->vid}", array('absolute' => TRUE));
//      }
//      else {
//        $description = 'Something happened...';
//        $url = $task->ref->environment->url;
//      }
//
//      if ($status == HOSTING_TASK_ERROR) {
//        $state = 'error';
//      }
//      elseif ($status == HOSTING_TASK_PROCESSING) {
//        $state = 'pending';
//      }
//      elseif ($status == HOSTING_TASK_SUCCESS || $status == HOSTING_TASK_WARNING) {
//        $state = 'success';
//      }
//      else {
//        $state = 'error';
//      }
//
//      $params = new stdClass();
//      $params->state = $state;
//      $params->target_url = $url;
//      $params->description = $description;
//      $params->context = 'devshop/' . $task->task_type;
//
//      $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
//
//      drush_log('Status posted! ', 'ok');
//    } catch (Github\Exception\RuntimeException $e) {
//      drush_log('GitHub API Error: ' . $e->getMessage(), 'error');
//      drush_log(l(t('Configure GitHub API'), 'admin/hosting/devshop/github'), 'error');
//    } catch (Github\Exception\ValidationFailedException $e) {
//      drush_log('GitHub API Error: ' . $e->getMessage(), 'error');
//    }
//
//    drush_log('done trying... ', 'ok');
//
//  }
//}

/**
 *
 */
function devshop_github_comment($task, $status) {

  $output = array();
  $output[] = '> **DEVSHOP**';
  $output[] = '> ' . ucfirst($task->task_type) .  ": " . _hosting_parse_error_code($status);
  $output[] = '> Site: ' . $task->ref->environment->url;
  $output[] = '> Project: ' . url("node/{$task->ref->project->nid}", array('absolute' => TRUE));

  if ($task->task_type == 'test') {
    $output[] = 'Results: ' . url("devshop_tests/{$task->nid}/{$task->vid}", array('absolute' => TRUE));
  }

  if ($task->task_type == 'import') {
    $output[] = t('Your environment is now available.');
  }

  return implode("\n", $output);
}



/**
 * GitHub action to take on webhook init
 */
function devshop_github_webhook($project_node){
  $headers = getallheaders();
  $project = $project_node->project;

  // Create a github deployment
  require_once 'vendor/autoload.php';

  // @TODO: Handle form content from github as well.
  if ($headers['content-type'] == 'application/json'){
    $data = json_decode($GLOBALS['HTTP_RAW_POST_DATA']);

    $args = array();
    $args['cache'] = 1;

    switch ($headers['X-GitHub-Event']){
      case 'ping':
        $message = 'Pong!';
        break;
      case 'push':

        // If push is for a deleted branch, don't do anything.
        if ($data->deleted && $data->after == "0000000000000000000000000000000000000000") {
          $message = 'Deleted ref detected.';
          break;
        }

        // Limit "Deploy" tasks to only run for the branches we have new code for..
        $git_ref = strtr($data->ref, array('refs/tags/' => '', 'refs/heads/' => ''));

        // Check for environments set to pull
        $environments_to_pull = array();
        foreach ($project->environments as $environment_name => $environment) {

          // Only pull if deploy is not disabled or if environment is tracking a tag.
          if ($git_ref == $environment->git_ref && !$environment->settings->pull_disabled && !in_array($environment->git_ref, $project->settings->git['tags'])) {
            $environments_to_pull[] = $environment->name;

            $args = array();
            $args['git_ref'] = $environment->git_ref;
            $args['update'] = $environment->settings->deploy['update'];
            $args['revert'] = $environment->settings->deploy['revert'];
            $args['cache'] = $environment->settings->deploy['cache'];

            if (isset($environment->site) && $node = node_load($environment->site)) {
              hosting_add_task($environment->site, 'devshop-deploy', $args);
            }
          }
        }

        $message = "Push Received for git ref $git_ref. Deploying code to environments: " . implode(', ', $environments_to_pull);
        break;

      case 'pull_request':
        // If pull request environments is enabled...
        if ($project->settings->github['pull_request_environments']){
          $message = 'Pull Request Received.';

          // @TODO: Handle forks?
          $branch = $data->pull_request->head->ref;

          // Determine environment branch.
          // @TODO: Make Configurable, allow branch names to be env name
          //   $environment_name = "pr" . $data->pull_request->number;
          $environment_name = 'branch_' . str_replace('-', '_', $branch);
          $already_have_pr_info = FALSE;

          // When PR is opened... create new environment.
          if ($data->action == 'opened'){
            $message = "Detected Pull Request creation for $branch \n";
            if (isset($project->environments[$environment_name])) {
              $message = "Environment $environment_name already exists! Not creating one... \n";

              // @TODO: Check for environments that are being deleted.
              if (isset($project->environments[$environment_name]->github_pull_request)) {
                $message .= "Already have a PR for $environment_name ... not inserting.";
                $already_have_pr_info = TRUE;
              }
            }
            else {
              // If method is "install"...
              if ($project->settings->github['pull_request_environments_method'] == 'install') {
                hosting_create_environment($project, $environment_name, $branch);
              }
              // Otherwise, it is a clone from live.
              else {
                hosting_create_environment($project, $environment_name, $branch, $project->settings->live['live_environment']);
              }
              $message .= "Environment $environment_name created for $project_node->title \n";
            }

            $owner = $project->github_owner;
            $repo = $project->github_repo;
            $message .= "About to try to create a deployment for $owner/$repo...  \n";

            // Send a "deployment" to github.
            try {
              $token = variable_get('devshop_github_token', '');
              $client = new \Github\Client();
              $client->authenticate($token, Github\Client::AUTH_HTTP_TOKEN);

              $sha = $data->pull_request->head->sha;
              $environment_name_url = str_replace('_', '-', $environment_name);
              $url = "http://{$environment_name_url}.{$project->base_url}";

              $params = new stdClass();
              $params->ref = $sha;
              $params->environment = $url;
              $params->required_contexts = array();
              $post_url = "/repos/$owner/$repo/deployments";
              $deployment = json_decode($client->getHttpClient()->post($post_url, json_encode($params))->getBody(TRUE));

              // Save deployment to pull request data for later access.
              $data->pull_request->deployment = $deployment;

              $message .= " Deployment Created! \n";

              // Create deployment status
              $params = new stdClass();
              $params->state = 'pending';
              $params->target_url = $url;
              $params->description = t('New environment is being created.  Please stand by.');
              $deployment_status = $client->getHttpClient()->post("/repos/$owner/$repo/deployments/{$deployment->id}/statuses", json_encode($params));

              $message .= " Deployment Status Created! \n";

              // Set a commit status for this REF for devshop/deploy context
              $sha =$data->pull_request->head->sha;

              $params = new stdClass();
              $params->state = 'pending';
              $params->target_url = url("node/$project->nid", array('absolute' => TRUE));
              $params->description = t('DevShop: Deploy');
              $params->context = 'devshop/deploy';

              // Post status to github
              $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
              $message .= " Commit Status Created! \n";

              // Determine if we are going to run tests.
              // For now it is using the "live environment" setting.
              // @TODO: Once we add "deploy hooks" to "Project Settings: Environment Defaults" we will have to change this.

              // If live environment is set to run tests on deploy...
              $live_environment = $project->settings->live['live_environment'];
              if ($project->environments[$live_environment]->settings->deploy['test']) {
                $params = new stdClass();
                $params->state = 'pending';
                $params->target_url = url(
                  "node/$project->nid",
                  array('absolute' => true)
                );
                $params->description = t('DevShop: Run Tests');
                $params->context = 'devshop/tests';

                // Post status to github
                $status = $client->getHttpClient()->post(
                  "/repos/$owner/$repo/statuses/$sha",
                  json_encode($params)
                );
                $message .= " Commit Status for pending test run Created! \n";
              }

            } catch (Github\Exception\RuntimeException $e) {
              watchdog('devshop_github', 'GitHub Runtime Error: ' . $e->getMessage());
              $message .= 'GitHub Runtime Error: ' . $e->getMessage();
            } catch (Github\Exception\ValidationFailedException $e) {
              watchdog('devshop_github', 'GitHub Validation Failed Error: ' . $e->getMessage());
              $message .= 'GitHub Runtime Error: ' . $e->getMessage();
            }

            // Insert PR record
            if (!$already_have_pr_info) {
              $info = new stdClass();
              $info->id = $data->pull_request->id;
              $info->number = $data->pull_request->number;
              $info->project_nid = $project->nid;
              $info->environment_name = $environment_name;
              $info->pull_request_object = serialize($data->pull_request);

              // Save environment record.
              if (drupal_write_record('hosting_devshop_github_pull_requests', $info)){
                $message .= ' ' . t('Pull Request info saved to DevShop.');
              }
            }
          }

          // When PR is updated, send a new deployment status environment.
          elseif ($data->action == 'synchronize') {

            // Create a new deployment
            $owner = $project->github_owner;
            $repo = $project->github_repo;
            $message .= "About to set deployment status for $owner/$repo...  \n";

            try {
              $token = variable_get('devshop_github_token', '');
              $client = new \Github\Client();
              $client->authenticate($token, Github\Client::AUTH_HTTP_TOKEN);

              $sha = $data->pull_request->head->sha;
              $environment = $project->environments[$environment_name];

              $params = new stdClass();
              $params->ref = $sha;
              $params->environment = $environment->url;
              $params->required_contexts = array();
              $post_url = "/repos/$owner/$repo/deployments";
              $deployment = json_decode($client->getHttpClient()->post($post_url, json_encode($params))->getBody(TRUE));

              // Save deployment to pull request data for later access.
              $data->pull_request->deployment = $deployment;

              $message .= " Deployment Created! \n";

              // Create deployment status
              $deployment_id = $deployment->id;

              $params = new stdClass();
              $params->state = 'pending';
              $params->target_url = $environment->url;
              $params->description = t('Code is being deployed.  Please stand by.');

              $post_url = "/repos/$owner/$repo/deployments/{$deployment_id}/statuses";
              $message .= "Attempting to create deployment status: $post_url \n";

              $deployment_status = $client->getHttpClient()->post($post_url, json_encode($params));

              $message .= " Deployment Status Created! \n";

              // Set a commit status for this REF for devshop/deploy context
              $sha =$data->pull_request->head->sha;

              $params = new stdClass();
              $params->state = 'pending';
              $params->target_url = url("node/$project->nid", array('absolute' => TRUE));
              $params->description = t('DevShop: Deploy');
              $params->context = 'devshop/deploy';

              // Post status to github
              $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));

              $message .= " Commit Status Created! \n";

              // If environment is configured to run tests, add another status.
              if (!empty($environment->settings->deploy['test'])) {
                $params = new stdClass();
                $params->state = 'pending';
                $params->target_url = url("node/$project->nid", array('absolute' => TRUE));
                $params->description = t('DevShop: Run Tests');
                $params->context = 'devshop/tests';

                // Post status to github
                $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));

                $message .= " Commit Status Created for test runs! \n";
              }  

            } catch (Github\Exception\RuntimeException $e) {
              $log = 'GitHub API Error during PR Syncronize: ' . $e->getMessage() . $e->getCode();
              watchdog('devshop_github', $log);

              if ($e->getCode() == '409') {
                $log .= "\n Out of date! alert the developer!";

                // Send a failed commit status to alert to developer
                $params = new stdClass();
                $params->state = 'failure';
                $params->target_url = $project->git_repo_url;
                $params->description = t('Out of date branch! Merge from master.');
                $params->context = 'devshop/merge';

                // Post status to github
                $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
              }
              $message .= $log ."\n";
            }


            // Update the PR record
            $info = new stdClass();
            $info->id = $data->pull_request->id;
            $info->number = $data->pull_request->number;
            $info->project_nid = $project->nid;
            $info->environment_name = $environment_name;
            $info->pull_request_object = serialize($data->pull_request);

            // Save environment record.
            if (isset($project->environments[$environment_name]->github_pull_request)) {
              $update = array('id');
            }
            else {
              $update = array();
            }

            if (drupal_write_record('hosting_devshop_github_pull_requests', $info, $update)){
              $message .= ' ' . t('Pull Request info saved to DevShop.');
            }
          }
          // When PR is closed, delete environment.
          elseif ($data->action == 'closed'){
            $message .= "Pull Request Closed \n";
            if ($project->settings->github['pull_request_environments_delete']){

              if (isset($project->environments[$environment_name]->site) && $node = node_load($project->environments[$environment_name]->site)) {
                hosting_add_task($project->environments[$environment_name]->site, 'delete');
              }
              $message .= "Site $environment_name (Node: {$project->environments[$environment_name]->site}) scheduled for deletion.";
            }
          }
        }
        break;
    }

  }
  else {
    $message = 'GitHub Request Received, but not in JSON. Please make sure to configure the webhook to use Payload version: application/vnd.github.v3+json';
  }
  return $message;
}

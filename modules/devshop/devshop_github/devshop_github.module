<?php

/**
 * @file devshop_github.module
 */

/**
 * Implements hook_menu().
 */
function devshop_github_menu() {
  $items = array();

  $items['admin/hosting/devshop/github'] = array(
    'title' => 'GitHub',
    'description' => 'DevShop GitHub Integration Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devshop_github_settings_form'),
    'access arguments' => array('administer projects'),
    'file' => 'admin.inc',
    'file path' => drupal_get_path('module', 'devshop_github') . '/includes',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_nodeapi_TYPE_OP().
 */
function devshop_github_nodeapi_project_load(&$node) {

  $query = db_query('SELECT * FROM {hosting_devshop_github_pull_requests} WHERE project_nid = %d', $node->nid);
  while($pull_request = db_fetch_object($query)) {
    $pull_request->pull_request_object = unserialize($pull_request->pull_request_object);
    $node->project->environments[$pull_request->environment_name]->github_pull_request = $pull_request;
  }
}

/**
 * Implements hook_nodeapi_TYPE_OP().
 */
function devshop_github_nodeapi_project_view(&$node, $a3, $a4) {

}


/**
 * Implements hook_hosting_task_update_status()
 */
function devshop_github_hosting_task_update_status($task, $status) {

  $task_types = array(
    'test',
    'import',
    'verify',
    'devshop-deploy',
  );

  if (in_array($task->task_type, $task_types) && $task->ref->type == 'site' && isset($task->ref->environment->github_pull_request)) {

    // If autoloader is not available, return.
    if (!file_exists(__DIR__ . '/vendor/autoload.php')) {
      return;
    }

    // If project is not from github, return.
    if ($task->ref->project->git_provider != 'github') {
      return;
    }

    // Include vendors
    require_once 'vendor/autoload.php';

    drush_log('===========================================', 'ok');
    drush_log('Notifying github...', 'ok');

    // Extract username and repo
    list($s, $owner, $repo) = explode('/', parse_url($task->ref->project->git_repo_url, PHP_URL_PATH));

    try {
      $token = variable_get('devshop_github_token', '');
      $client = new \Github\Client();
      $client->authenticate($token, Github\Client::AUTH_HTTP_TOKEN);

      $comment = $client->api('issue')
        ->comments()
        ->create($owner, $repo, $task->ref->environment->github_pull_request->number, array(
          'body' => devshop_github_comment($task, $status),
        ));
      drush_log('Comment posted! ' . print_r($comment, 1), 'ok');
    } catch (Github\Exception\RuntimeException $e) {
      drush_log('GitHub API Error: ' . $e->getMessage(), 'error');
      drush_log(l(t('Configure GitHub API'), 'admin/hosting/devshop/github'), 'error');
    } catch (Github\Exception\ValidationFailedException $e) {
      drush_log('GitHub API Error: ' . $e->getMessage(), 'error');
    }

    drush_log('done trying... ', 'ok');

  }
}

/**
 *
 */
function devshop_github_comment($task, $status) {

  $output = array();
  $output[] = '> **DEVSHOP**';
  $output[] = '> ' . ucfirst($task->task_type) .  ": " . _hosting_parse_error_code($status);
  $output[] = '> Site: ' . $task->ref->environment->url;
  $output[] = '> Project: ' . url("node/{$task->ref->project->nid}", array('absolute' => TRUE));

  if ($task->task_type == 'test') {
    $output[] = 'Results: ' . url("devshop_tests/{$task->nid}/{$task->vid}", array('absolute' => TRUE));
  }

  if ($task->task_type == 'import') {
    $output[] = t('Your environment is now available.');
  }

  return implode("\n", $output);
}
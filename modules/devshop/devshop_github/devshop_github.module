<?php

/**
 * @file devshop_github.module
 */

/**
 * Implements hook_menu().
 */
function devshop_github_menu() {
  $items = array();

  $items['admin/hosting/devshop/github'] = array(
    'title' => 'GitHub',
    'description' => 'DevShop GitHub Integration Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('devshop_github_settings_form'),
    'access arguments' => array('administer projects'),
    'file' => 'admin.inc',
    'file path' => drupal_get_path('module', 'devshop_github') . '/includes',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_nodeapi_TYPE_OP().
 */
function devshop_github_nodeapi_project_view(&$node, $a3, $a4) {

  // If autoloader is not available, return.
  if (!file_exists(__DIR__ . '/vendor/autoload.php')) {
    return;
  }

  // If project is not from github, return.
  if ($node->project->git_provider != 'github') {
    return;
  }

  // Include vendors
  require_once 'vendor/autoload.php';

  // Extract username and repo
  list($s, $owner, $repo) = explode('/', parse_url($node->project->git_repo_url, PHP_URL_PATH));

  try {
    $token = variable_get('devshop_github_token', '');
    $client = new \Github\Client();
    $client->authenticate($token, Github\Client::AUTH_HTTP_TOKEN);

    $response = $client->getHttpClient()->get("/repos/$owner/$repo/pulls");
    $pulls = Github\HttpClient\Message\ResponseMediator::getContent($response);
      dsm($pulls);

  }
  catch (Github\Exception\RuntimeException $e) {
    drupal_set_message('GitHub API Error: ' . $e->getMessage(), 'error');
    drupal_set_message(l(t('Configure GitHub API'), 'admin/hosting/devshop/github'), 'error');
  }

  $output = 'hi!';
  $node->content['hello'] = array(
    '#type' => 'item',
    '#title' => t('Pull Request'),
    '#value' => $output,
  );
}
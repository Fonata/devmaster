<?php

require_once 'vendor/autoload.php';
use Symfony\Component\Yaml\Parser;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;
use SensioLabs\AnsiConverter\AnsiToHtmlConverter;
use SensioLabs\AnsiConverter\Theme\SolarizedTheme;
use SensioLabs\AnsiConverter\Theme\SolarizedXTermTheme;

require_once 'hooks.php';

/**
 * Implements hook_nodeapi_site_load()
 *
 * For site nodes, look for a .hooks file in the git repo root.
 */
function devshop_dothooks_devshop_environment_alter(&$environment) {
    $yaml = new Parser();
    $hooks_path = $environment->repo_root . '/.hooks';
    $environment->dothooks = $yaml->parse(file_get_contents($hooks_path));
}

/**
 * Implements hook_form_alter().
 */
function devshop_dothooks_form_alter(&$form, &$form_state) {

  $form['project']['settings']['deploy']['default_hooks']['dothooks'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use <code>.hooks</code> file for deploy hooks.'),
    '#weight' => -99,
    '#default_value' => $form['#node']->project->settings->deploy['allow_environment_deploy_config'],
    '#description' => t('You can add your desired deploy hooks to a file in the root folder of your project. This is recommended as it gives your developers control over what happens when their code is deployed. See the !dothooks for more information. <em>If you use a <code>.hooks</code> file you probably want to uncheck the deploy hooks here.</em>', array(
      '!dothooks' => l(t('.hooks documentation'), 'admin/devshop/dothooks'),
    )),
  );
}

/**
 * Implements hook_access().
 */
function devshop_dothooks_menu() {
  $items['admin/devshop/dothooks'] = array(
    'title' => 'Deploy Hooks File Help',
    'description' => '.hooks documentation',
    'page callback' => 'devshop_dothooks_help_page',
    'access arguments' => array('administer hosting settings'),
    'tab_parent' => 'admin/devshop',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Page callback for admin/devshop/dothooks
 *
 * Output comes from hook_help()
 * @return string
 */
function devshop_dothooks_help_page() {
  return '';
}

/**
 * Implements hook_help()
 * @param $path
 * @param $arg
 * @return string
 */
function devshop_dothooks_help($path, $arg)
{
  switch ($path) {
    // Main module help for the block module
    case 'admin/devshop/dothooks':
      $note = t(
        'You can control what happens on deploy through a <code>.hooks</code> file in your repository.'
      );

      return <<<HTML
<p>$note</p>
<pre>
# Fires after an environment is installed.
install: |
  drush {{alias}} vset site_name "Hooks Hooks Hooks"

# Fires after code is deployed.
deploy: |
  drush {{alias}} updb -y
  drush {{alias}} cc all

# Fires after "verify" task.
verify: |
  drush {{alias}} status

# Fires after "Run Tests" task.
test: |
  drush {{alias}} uli


# Fires after "Deploy Data (Sync)" task.
sync: |
  drush {{alias}} en devel -y

</pre>
HTML;

  }
}


/**
 * Runs a hook for a task.
 * @param $hook
 * @param $task
 */
function devshop_dothooks_run_hook($hook, $environment) {

  if (empty($environment->dothooks[$hook])) {
    drush_log('[.hooks] Hook not found: ' . $hook, 'info');
    return;
  }

  drush_log('[.hooks] Hook found: ' . $hook, 'ok');

  $hooks = explode("\n", $environment->dothooks[$hook]);
  foreach ($hooks as $hook_line) {

    $hook_line = strtr($hook_line, array(
      '{{alias}}' => $environment->drush_alias,
    ));

    drush_log($hook_line, 'dothooks_command');
    $process = new Process($hook_line);
    $process->setTimeout(NULL);
    $exit_code = $process->run(function ($type, $buffer) {
      if (Process::ERR === $type) {
        drush_log($buffer, 'dothooks_ok');
      } else {
        drush_log($buffer, 'dothooks_ok');
      }
    });

    // check exit code
    if ($exit_code === 0) {
      drush_log("[.hooks] Command executed successfully.", 'ok');
    }
    else {
      drush_log("[.hooks] Hook command failed: $hook_line", 'error');
      drush_log("$hook_line", 'dothooks_error');
    }
  }
}

/**
 * Implements hook_preprocess_node()
 * for task nodes, show the .hooks output.
 * @param $vars
 */
function devshop_dothooks_preprocess_node(&$vars) {

  if ($vars['type'] == 'task') {
    $ref = node_load($vars['rid']);
    if ($ref->type == 'site' && $ref->environment->dothooks) {
      $messages = array();
      $converter = new AnsiToHtmlConverter(null, false);

      $query = db_query("SELECT message, type FROM {hosting_task_log} WHERE vid = %d AND type LIKE 'dothooks_%' ORDER BY vid, lid", $vars['node']->vid);
      while ($results = db_fetch_object($query)) {

        if ($results->type == 'dothooks_command') {
          if (empty($results->message)) {
            continue;
          }
          $command = $results->message;
          $outputs[$command] = array(
            'status' => 'success',
            'icon' => 'check',
            'output' => '',
          );
          continue;
        } elseif ($results->type == 'dothooks_ok') {
          $outputs[$command]['output'] .= $results->message;
        } elseif ($results->type == 'dothooks_error') {
          $outputs[$command]['status'] = 'danger';
          $outputs[$command]['icon'] = 'exclamation-circle';
          $outputs[$command]['output'] .= $results->message;
        }
      }

      foreach ($outputs as $command => $data) {
        $status = $data['status'];
        $icon = $data['icon'];
        $output = $converter->convert($data['output']);
        $messages[] = <<<HTML
<div class="panel panel-$status">
  <div class="panel-heading"><i class="fa fa-$icon"></i> $command</div>
  <div class="panel-body">
     <pre>$output</pre>
  </div>
</div>
HTML;
      }

      if (count($messages)) {
        $messages = implode("\n", $messages);
        $content = $vars['content'];
        $vars['content'] = <<<HTML
  <h3>Hooks Output</h3>
  <p>The following commands were loaded from the project's <samp>.hooks</samp> file.</p>
  $messages
  $content
HTML;

      }
    }
  }
}

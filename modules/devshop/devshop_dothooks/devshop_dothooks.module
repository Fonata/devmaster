<?php

require_once 'vendor/autoload.php';
use Symfony\Component\Yaml\Parser;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;
use SensioLabs\AnsiConverter\AnsiToHtmlConverter;
use SensioLabs\AnsiConverter\Theme\SolarizedTheme;
use SensioLabs\AnsiConverter\Theme\SolarizedXTermTheme;

require_once 'hooks.php';

/**
 * Implements hook_nodeapi_site_load()
 *
 * For site nodes, look for a .hooks file in the git repo root.
 */
function devshop_dothooks_devshop_environment_alter(&$environment) {
    $yaml = new Parser();
    $hooks_path = $environment->repo_root . '/.hooks';
    $environment->dothooks = $yaml->parse(file_get_contents($hooks_path));
}

/**
 * Runs a hook for a task.
 * @param $hook
 * @param $task
 */
function devshop_dothooks_run_hook($hook, $environment) {

  if (empty($environment->dothooks[$hook])) {
    drush_log('[.hooks] Hook not found: ' . $hook, 'info');
    return;
  }

  drush_log('[.hooks] Hook found: ' . $hook, 'ok');

  $hooks = explode("\n", $environment->dothooks[$hook]);
  foreach ($hooks as $hook_line) {

    $hook_line = strtr($hook_line, array(
      '{{alias}}' => $environment->drush_alias,
    ));

    drush_log($hook_line, 'dothooks_command');
    $process = new Process($hook_line);
    $process->run(function ($type, $buffer) {
      if (Process::ERR === $type) {
        drush_log($buffer, 'dothooks_error');
        drush_log("[.hooks] Hook failed: $buffer", 'error');
      } else {
        drush_log($buffer, 'dothooks_ok');
      }
    });
  }
}

/**
 * Implements hook_preprocess_node()
 * for task nodes, show the .hooks output.
 * @param $vars
 */
function devshop_dothooks_preprocess_node(&$vars) {

  if ($vars['type'] == 'task') {
    $ref = node_load($vars['rid']);
    if ($ref->type == 'site' && $ref->environment->dothooks) {
      $messages = array();
      $converter = new AnsiToHtmlConverter(null, false);

      $query = db_query("SELECT message, type FROM {hosting_task_log} WHERE vid = %d AND type LIKE 'dothooks_%' ORDER BY vid, lid", $vars['node']->vid);
      while ($results = db_fetch_object($query)) {

        if ($results->type == 'dothooks_command') {
          if (empty($results->message)) {
            continue;
          }
          $command = $results->message;
          $outputs[$command] = array(
            'status' => 'success',
            'icon' => 'check',
            'output' => '',
          );
          continue;
        } elseif ($results->type == 'dothooks_ok') {
          $outputs[$command]['output'] .= $results->message;
        } elseif ($results->type == 'dothooks_error') {
          $outputs[$command]['status'] = 'danger';
          $outputs[$command]['icon'] = 'exclamation-circle';
          $outputs[$command]['output'] .= $results->message;
        }
      }

      foreach ($outputs as $command => $data) {
        $status = $data['status'];
        $icon = $data['icon'];
        $output = $converter->convert($data['output']);
        $messages[] = <<<HTML
<div class="panel panel-$status">
  <div class="panel-heading"><i class="fa fa-$icon"></i> $command</div>
  <div class="panel-body">
     <pre>$output</pre>
  </div>
</div>
HTML;
      }

      if (count($messages)) {
        $messages = implode("\n", $messages);
        $content = $vars['content'];
        $vars['content'] = <<<HTML
  <h3>Hooks Output</h3>
  <p>The following commands were loaded from the project's <samp>.hooks</samp> file.</p>
  $messages
  $content
HTML;

      }
    }
  }
}

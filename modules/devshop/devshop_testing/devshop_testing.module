<?php

/**
 * @file devshop_projects.module
 * a module in the DevShop module group which enables the user to create 
 * proects and group sites/platforms into project groups.
 */

/**
 * Implements hook_menu()
 */
function devshop_testing_menu() {
  $items['devshop_tests/%'] = array(
    'title' => 'Test Results',
    'page callback' => 'devshop_testing_results_page',
    'page arguments' => array(1),
    'file' => 'pages.inc',
    'access arguments' => array('access test results'),
  );
  $items['devshop_tests/ansi-to-html'] = array(
    'page callback' => 'devshop_testing_results_page_raw',
    'page arguments' => array(2),
    'file' => 'pages.inc',
    'access arguments' => array('access test results'),
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function devshop_testing_perm() {
  return array(
    'create test task',
    'access test results',
  );
}

/**
 * Implementation of hook_hosting_tasks()
 */
function devshop_testing_hosting_tasks() {
  $tasks = array();

  $tasks['site']['test'] = array(
    'title' => t('Run Tests'),
    'description' => t('Run tests on the site.'),
    'dialog' => TRUE,
    'task_permitted' => TRUE,
    'access callback' => 'devshop_hosting_task_menu_access',
  );

  return $tasks;
}

/**
 * Implements hook_devshop_environment_actions().
 *
 * Defines the list of tasks that appear under the gear icon.
 */
function devshop_testing_devshop_environment_actions($environment) {
  return array(
    'test'
  );
}

/**
 * Implementation of hook_hosting_task_TASK_TYPE_form().
 *
 * Our parameters are added in devshop_testing_form_alter()
 */
function hosting_task_test_form($node) {
  return devshop_testing_form_elements($node->project, $node->environment->name);
}

/**
 * Implements hook_form_alter().
 */
function devshop_testing_form_alter(&$form, &$form_state, $form_id) {

  // If it's the project form, it's "defaults" for environments.
  if ($form_id == 'project_node_form') {
    $form['project']['settings']['testing'] = array_merge(array(
      '#type' => 'fieldset',
      '#title' => t('Testing'),
      '#description' => t('Set the default testing settings for environments here.  Each environment can override these settings.'),
    ), devshop_testing_form_elements($form['#node']->project)
    );
  }

  // If it's the site (environment) form, it is the override.
  elseif ($form_id == 'site_node_form') {
    if (!isset($form['#node']->project)) {
      return;
    }
    $form['environment']['settings']['testing'] = array(
      '#type' => 'fieldset',
      '#title' => t('Testing'),
      '#description' => t('Set the testing settings for this environment.'),
      '#weight' => 100,
    );
    $form['environment']['settings']['testing'] = devshop_testing_form_elements($form['#node']->project,  $form['#node']->environment->name);
    
    // Add to deploy hooks.
    $form['environment']['settings']['deploy']['test'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run Tests'),
      '#description' => t('Run tests after every code deploy.'),
      '#weight' => 100,
      '#default_value' => $form['#node']->environment->settings->deploy['test'],
    );
  }
  // Run Tests Form: add extra submit handler to stringify the test options.
  elseif ($form_id == 'hosting_task_confirm_form' && $form['task']['#value'] == 'test') {
    array_unshift($form['#submit'], 'devshop_testing_task_submit');
  }
  // Deploy Code Task confirm form.
  elseif ($form_id == 'hosting_task_confirm_form' && $form['task']['#value'] == 'devshop-deploy') {
    $node = node_load($form['nid']['#value']);
    $form['parameters']['test'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run Tests'),
      '#description' => t('Run tests after this code deploy.'),
      '#default_value' => $node->environment->settings->deploy['test'],
    );
  }
}

/**
 * Helper that returns the common form elements for running tests.
 */
function devshop_testing_form_elements($project, $environment_name = NULL) {
  
  
  // Load environment object and settings, if we need it.
  if ($environment_name) {
    $environment = $project->environments[$environment_name];
    $settings = $environment->settings;
  }
  else {
    // If these settings are not for a specific environment, load up live or the first one.
    if ($project->settings->live['live_environment']) {
      $environment = $project->environments[$project->settings->live['live_environment']];
    }
    else {
      $environment = array_shift($project->environments);
    }
    $settings = $project->settings;
  }
  
  // If this is an environment form, and we are missing testing settings, inherit the project settings.
  if (isset($environment) && !isset($settings->testing)) {
    $settings->testing = $project->settings->testing;
  } 
  // If a project and we are missing testing settings, load defaults.  
  // @TODO: Move this to the node API?
  elseif (!isset($settings->testing)) {
    $settings->testing = array(
      'test_type' => 0,
      'tests_to_run' => '',
      'behat_folder_path' => '',
      'behat_bin' => 'bin/behat',
    );
  }
  
  // build this group of fields.
  $testing_form = array();
  $testing_form['test_type'] = array(
    '#title' => t('Test Type'),
    '#options' => array(
      0 => t('None'),
      'simpletest' => t('SimpleTest'),
      'behat' => t('Behat'),
    ),
    '#type' => 'radios',
    '#default_value' => $settings->testing['test_type'],
  );
  
  // Look for behat feature files.
  // @TODO: Extract this to a hook to make tests types extensible.
  $tests = array();
  
  // Final check for repo root.
  if (empty($environment->repo_root)){
    $tests[] = 'Something is wrong. Environment not found.';
  }
  else {
    $directory = $environment->repo_root . '/' . $settings->testing['behat_folder_path'] . '/features';

    $files = file_scan_directory($directory, '.feature', array('.', '..'));

    $tests = array();
    foreach ($files as $file) {
      $value = str_replace($directory, '', $file->filename);
      $tests[$value] = $file->basename;
    }
  }
 
  $testing_form['tests_to_run'] = array(
    '#type' => 'checkboxes',
    '#options' => $tests,
    '#title' => t('Tests to Run'),
    '#default_value' => $settings->testing['tests_to_run'],
    '#description' => t('Select the tests you wish to run.  Leave all unchecked to run all of them.'),
  );
  
  if (empty($environment_name)) {
    $testing_form['tests_to_run']['#description'] = t('Select the tests you wish to run by default. These tests were detected from your environment %live.', array('%live' => $environment->name));
  }

  $testing_form['behat_folder_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Behat folder path'),
    '#description' => t('Enter the path to your behat tests folder, relative to your git repo root.'),
    '#default_value' => $settings->testing['behat_folder_path'],
  );
  $testing_form['behat_bin_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Behat executable path'),
    '#description' => t('Enter the path to your bin/behat executable file, relative to the Behat folder path.'),
    '#default_value' => $settings->testing['behat_bin_path'],
  );
  
  // Lock fields in environment settings.
  if ($environment_name) {
    $locked = array(
      'test_type',
      'behat_folder_path',
      'behat_bin_path',
    );
    foreach ($locked as $field){
      $testing_form[$field]['#value'] = $testing_form[$field]['#default_value'];
      $testing_form[$field]['#type'] = 'value';
    }
  }
  return $testing_form;
}

/**
 * Helper to stringify the tests to run.
 */
function devshop_testing_task_submit(&$form, &$form_state) {
  
  // Implode tests to run
  $value = implode(',', array_filter($form_state['values']['parameters']['tests_to_run']));
  form_set_value($form['parameters']['tests_to_run'], $value, $form_state);
}

/**
 * Implements hook_nodeapi_TYPE_OP()
 *
 * @param $node
 * @param $a3
 * @param $a4
 */
function devshop_testing_nodeapi_task_load(&$node, $a3, $a4) {

  if ($node->task_type == 'test' && ($node->task_status == HOSTING_TASK_PROCESSING || $node->task_status == HOSTING_TASK_QUEUED)) {
    unset($node->task_args['test_results']);
  }

  if ($node->type == 'task' && !empty($node->task_args['output_path']) && file_exists($node->task_args['output_path'])) {
    include_once('pages.inc');
    $node->test_results_formatted = devshop_testing_results_to_html(file_get_contents($node->task_args['output_path']));
  }
}

/**
 * Implements hook_nodeapi_TYPE_OP()
 * @param $node
 * @param $a3
 * @param $a4
 */
function devshop_testing_nodeapi_task_view(&$node, $a3, $a4) {

  if ($node->type == 'task' && !empty($node->test_results_formatted)) {
    unset($node->content['hosting_log']);
    $node->content['results'] = array(
      '#type' => 'item',
      '#value' => $node->test_results_formatted,
      '#weight' => -100,
      '#prefix' => '<div class="results-wrapper">',
      '#suffix' => '</div>',
    );

    // If task is still running, add the javascript to reload it.
    $filename = pathinfo($node->task_args['output_path'], PATHINFO_BASENAME);
    drupal_add_js(drupal_get_path('module', 'devshop_testing') . '/test-reload.js');
    drupal_add_js(array(
      'test_running' => TRUE,
      'test_url' => url('devshop_tests/ansi-to-html/' . $filename),
    ), 'setting');

  }
}

/**
 * Implements hook_preprocess_node()
 * @param $var
 */
function devshop_testing_preprocess_node(&$vars) {
  global $user;
  $node = &$vars['node'];
  if (!empty($node->project->environments)) {
    foreach ($node->project->environments as &$environment) {
      $environment->testing = TRUE;

      // Load test task.
      $task = db_fetch_object(db_query('SELECT * FROM {hosting_task} WHERE rid = %d AND task_type = "test" ORDER BY vid DESC', $environment->site));

      $environment->test = $task;
      $environment->test->task_node = node_load($environment->test->nid);
      $environment->test->duration = format_interval($task->delta, 1);
      $environment->test->permalink = url("devshop_tests/{$environment->test->nid}/{$environment->test->vid}");

      if ($task->executed) {
        $environment->test->time_ago = format_interval(time() - $task->executed, 1);
        $environment->test->ago = t('@time ago', array('@time' => $environment->test->time_ago));
      }
      $environment->test->run_tests_url = url("node/$environment->site/site_test", array('query' => array('token' => drupal_get_token($user->uid))));
      $environment->test->status_url = url('node/' . $task->nid);

      $environment->test->results = $environment->test->task_node->test_results_formatted;

      if ($environment->test->task_status == HOSTING_TASK_ERROR) {
        $environment->test->status_message = t('Failed');
        $environment->test->status_class = 'danger';
      }
      elseif ($environment->test->task_status == HOSTING_TASK_SUCCESS) {
        $environment->test->status_message = t('Passed!');
        $environment->test->status_class = 'success';
      }
      elseif ($environment->test->task_status === HOSTING_TASK_QUEUED) {
        $environment->test->status_message = t('Queued');
        $environment->test->status_class = 'default';
        $environment->test->duration = '';

      }
      elseif ($environment->test->task_status == HOSTING_TASK_PROCESSING) {
        $environment->test->status_message = t('Running...');
        $environment->test->status_class = 'default';
        $environment->test->duration = '';
      }
      elseif ($environment->test->task_status == HOSTING_TASK_WARNING) {
        $environment->test->status_message = t('Passed with Warnings');
        $environment->test->status_class = 'warning';
      }


      else {
        $environment->test->status_message = t('Ready');
        $environment->test->status_class = 'default';
        $environment->test->duration = '';
      }
    }
  }
}


/**
 * Implements hook_hosting_slack_message_alter()
 */ 
function devshop_testing_hosting_slack_message_alter(&$message_options) {
  
  
  if ($message_options->task->task_type == 'test') {

    $url = url('devshop_tests/' . $message_options->task->nid . '/' . $message_options->task->vid, array('absolute' => TRUE));
    
    $attachment = new stdClass();
    $attachment->fallback = t('Results: ') . $url;
    $attachment->title = t('Results: ');
    $attachment->text = $url;
    $attachment->title_link = $url;
    
    $message_options->attachments[] = $attachment;

  }
}